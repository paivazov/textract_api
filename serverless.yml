# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: textract-api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.11

# you can overwrite defaults here
#  stage: dev
  region: eu-central-1

# you can add statements to the Lambda function's IAM Role here
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:PutObject"
            - "s3:GetObject"
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
          Resource: "*"


# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.py'
#    - '!exclude-me-dir/**'
#    - include-me.py
#    - include-me-dir/**

layers:
  requests_layer:
    path: lambda-layers/requests
    compatibleRuntimes:
      - python3.11

functions:
  create_file:
    handler: app/create_file.lambda_handler
    events:
      - httpApi:
          path: /files
          method: post
  get_file_by_id:
    handler: app/get_file_by_id.lambda_handler
    events:
      - httpApi:
          path: /files/{file_id}
          method: get
  process_file:
    handler: app/handler.lambda_handler
    events:
      - s3:
          bucket: !GetAtt MyS3Bucket.BucketName
          event: s3:ObjectCreated:*
  make_callback:
    handler: handler.make_callback
    layers:
      - "${cf:textract-api-dev.PythonDashappDashdependenciesLambdaLayerQualifiedArn}"
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - FilesTable
              - StreamArn
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    FilesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: images-extract-text
    ResultsDB:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: FileResults
        AttributeDefinitions:
          - AttributeName: file_id
            AttributeType: S
        KeySchema:
          - AttributeName: file_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
          StreamViewType: NEW_IMAGE
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
